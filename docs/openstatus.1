'\" t
.\" Automatically generated by Pandoc 3.7.0.2
.\"
.TH "" "" "" ""
.SH OpenStatus CLI
.SS CLI interface \- openstatus
OpenStatus is a command line interface for managing your monitors and
triggering your synthetics tests.
Please report any issues at
https://github.com/openstatusHQ/cli/issues/new.
.PP
This is OpenStatus Command Line Interface, the OpenStatus.dev CLI.
.PP
Usage:
.IP
.EX
$ openstatus [COMMAND] [COMMAND FLAGS] [ARGUMENTS...]
.EE
.SS \f[CR]monitors\f[R] command
Manage your monitors.
.PP
Usage:
.IP
.EX
$ openstatus [GLOBAL FLAGS] monitors [ARGUMENTS...]
.EE
.SS \f[CR]monitors apply\f[R] subcommand
Create or update monitors.
.RS
.PP
openstatus monitors apply [options]
.RE
.PP
Creates or updates monitors according to the OpenStatus configuration
file.
.PP
Usage:
.IP
.EX
$ openstatus [GLOBAL FLAGS] monitors apply [COMMAND FLAGS] [ARGUMENTS...]
.EE
.PP
The following flags are supported:
.PP
.TS
tab(@);
lw(16.0n) lw(30.3n) cw(10.5n) cw(13.2n).
T{
Name
T}@T{
Description
T}@T{
Default value
T}@T{
Environment variables
T}
_
T{
\f[CR]\-\-config=\(dq\&...\(dq\f[R] (\f[CR]\-c\f[R])
T}@T{
The configuration file containing monitor information
T}@T{
\f[CR]openstatus.yaml\f[R]
T}@T{
\f[I]none\f[R]
T}
T{
\f[CR]\-\-access\-token=\(dq\&...\(dq\f[R] (\f[CR]\-t\f[R])
T}@T{
OpenStatus API Access Token
T}@T{
T}@T{
\f[CR]OPENSTATUS_API_TOKEN\f[R]
T}
T{
\f[CR]\-\-auto\-accept\f[R] (\f[CR]\-y\f[R])
T}@T{
Automatically accept the prompt
T}@T{
\f[CR]false\f[R]
T}@T{
\f[I]none\f[R]
T}
.TE
.SS \f[CR]monitors create\f[R] subcommand
Create monitors (beta).
.RS
.PP
openstatus monitors create [options]
.RE
.PP
Create the monitors defined in the openstatus.yaml file.
.PP
Usage:
.IP
.EX
$ openstatus [GLOBAL FLAGS] monitors create [COMMAND FLAGS] [ARGUMENTS...]
.EE
.PP
The following flags are supported:
.PP
.TS
tab(@);
lw(16.0n) lw(30.3n) cw(10.5n) cw(13.2n).
T{
Name
T}@T{
Description
T}@T{
Default value
T}@T{
Environment variables
T}
_
T{
\f[CR]\-\-config=\(dq\&...\(dq\f[R] (\f[CR]\-c\f[R])
T}@T{
The configuration file containing monitor information
T}@T{
\f[CR]openstatus.yaml\f[R]
T}@T{
\f[I]none\f[R]
T}
T{
\f[CR]\-\-access\-token=\(dq\&...\(dq\f[R] (\f[CR]\-t\f[R])
T}@T{
OpenStatus API Access Token
T}@T{
T}@T{
\f[CR]OPENSTATUS_API_TOKEN\f[R]
T}
T{
\f[CR]\-\-auto\-accept\f[R] (\f[CR]\-y\f[R])
T}@T{
Automatically accept the prompt
T}@T{
\f[CR]false\f[R]
T}@T{
\f[I]none\f[R]
T}
.TE
.SS \f[CR]monitors delete\f[R] subcommand
Delete a monitor.
.RS
.PP
openstatus monitors delete [MonitorID] [options]
.RE
.PP
Usage:
.IP
.EX
$ openstatus [GLOBAL FLAGS] monitors delete [COMMAND FLAGS] [ARGUMENTS...]
.EE
.PP
The following flags are supported:
.PP
.TS
tab(@);
lw(20.1n) lw(22.9n) cw(10.4n) cw(16.6n).
T{
Name
T}@T{
Description
T}@T{
Default value
T}@T{
Environment variables
T}
_
T{
\f[CR]\-\-access\-token=\(dq\&...\(dq\f[R] (\f[CR]\-t\f[R])
T}@T{
OpenStatus API Access Token
T}@T{
T}@T{
\f[CR]OPENSTATUS_API_TOKEN\f[R]
T}
T{
\f[CR]\-\-auto\-accept\f[R] (\f[CR]\-y\f[R])
T}@T{
Automatically accept the prompt
T}@T{
\f[CR]false\f[R]
T}@T{
\f[I]none\f[R]
T}
.TE
.SS \f[CR]monitors export\f[R] subcommand
Export all your monitors.
.RS
.PP
openstatus monitors export [options]
.RE
.PP
Export all your monitors in your workspace to a YAML file; it will also
create a lock file to manage your monitors with `apply'.
.PP
Usage:
.IP
.EX
$ openstatus [GLOBAL FLAGS] monitors export [COMMAND FLAGS] [ARGUMENTS...]
.EE
.PP
The following flags are supported:
.PP
.TS
tab(@);
lw(20.1n) lw(20.1n) cw(13.2n) cw(16.6n).
T{
Name
T}@T{
Description
T}@T{
Default value
T}@T{
Environment variables
T}
_
T{
\f[CR]\-\-access\-token=\(dq\&...\(dq\f[R] (\f[CR]\-t\f[R])
T}@T{
OpenStatus API Access Token
T}@T{
T}@T{
\f[CR]OPENSTATUS_API_TOKEN\f[R]
T}
T{
\f[CR]\-\-output=\(dq\&...\(dq\f[R] (\f[CR]\-o\f[R])
T}@T{
The output file name
T}@T{
\f[CR]openstatus.yaml\f[R]
T}@T{
\f[I]none\f[R]
T}
.TE
.SS \f[CR]monitors info\f[R] subcommand
Get a monitor information.
.RS
.PP
openstatus monitors info [MonitorID]
.RE
.PP
Fetch the monitor information.
The monitor information includes details such as name, description,
endpoint, method, frequency, locations, active status, public status,
timeout, degraded after, and body.
The body is truncated to 40 characters.
.PP
Usage:
.IP
.EX
$ openstatus [GLOBAL FLAGS] monitors info [COMMAND FLAGS] [ARGUMENTS...]
.EE
.PP
The following flags are supported:
.PP
.TS
tab(@);
lw(20.9n) lw(20.9n) cw(10.8n) cw(17.3n).
T{
Name
T}@T{
Description
T}@T{
Default value
T}@T{
Environment variables
T}
_
T{
\f[CR]\-\-access\-token=\(dq\&...\(dq\f[R] (\f[CR]\-t\f[R])
T}@T{
OpenStatus API Access Token
T}@T{
T}@T{
\f[CR]OPENSTATUS_API_TOKEN\f[R]
T}
.TE
.SS \f[CR]monitors list\f[R] subcommand
List all monitors.
.RS
.PP
openstatus monitors list [options]
.RE
.PP
List all monitors.
The list shows all your monitors attached to your workspace.
It displays the ID, name, and URL of each monitor.
.PP
Usage:
.IP
.EX
$ openstatus [GLOBAL FLAGS] monitors list [COMMAND FLAGS] [ARGUMENTS...]
.EE
.PP
The following flags are supported:
.PP
.TS
tab(@);
lw(18.3n) lw(27.1n) cw(9.5n) cw(15.1n).
T{
Name
T}@T{
Description
T}@T{
Default value
T}@T{
Environment variables
T}
_
T{
\f[CR]\-\-all\f[R]
T}@T{
List all monitors including inactive ones
T}@T{
\f[CR]false\f[R]
T}@T{
\f[I]none\f[R]
T}
T{
\f[CR]\-\-access\-token=\(dq\&...\(dq\f[R] (\f[CR]\-t\f[R])
T}@T{
OpenStatus API Access Token
T}@T{
T}@T{
\f[CR]OPENSTATUS_API_TOKEN\f[R]
T}
.TE
.SS \f[CR]monitors trigger\f[R] subcommand
Trigger a monitor execution.
.RS
.PP
openstatus monitors trigger [MonitorId] [options]
.RE
.PP
Trigger a monitor execution on demand.
This command allows you to launch your tests on demand.
.PP
Usage:
.IP
.EX
$ openstatus [GLOBAL FLAGS] monitors trigger [COMMAND FLAGS] [ARGUMENTS...]
.EE
.PP
The following flags are supported:
.PP
.TS
tab(@);
lw(20.9n) lw(20.9n) cw(10.8n) cw(17.3n).
T{
Name
T}@T{
Description
T}@T{
Default value
T}@T{
Environment variables
T}
_
T{
\f[CR]\-\-access\-token=\(dq\&...\(dq\f[R] (\f[CR]\-t\f[R])
T}@T{
OpenStatus API Access Token
T}@T{
T}@T{
\f[CR]OPENSTATUS_API_TOKEN\f[R]
T}
.TE
.SS \f[CR]run\f[R] command (aliases: \f[CR]r\f[R])
Run your synthetics tests.
.RS
.PP
openstatus run [options]
.RE
.PP
Run the synthetic tests defined in the config.openstatus.yaml.
.PP
Usage:
.IP
.EX
$ openstatus [GLOBAL FLAGS] run [COMMAND FLAGS] [ARGUMENTS...]
.EE
.PP
The following flags are supported:
.PP
.TS
tab(@);
lw(18.8n) lw(18.8n) cw(16.9n) cw(15.6n).
T{
Name
T}@T{
Description
T}@T{
Default value
T}@T{
Environment variables
T}
_
T{
\f[CR]\-\-config=\(dq\&...\(dq\f[R]
T}@T{
The configuration file
T}@T{
\f[CR]config.openstatus.yaml\f[R]
T}@T{
\f[I]none\f[R]
T}
T{
\f[CR]\-\-access\-token=\(dq\&...\(dq\f[R] (\f[CR]\-t\f[R])
T}@T{
OpenStatus API Access Token
T}@T{
T}@T{
\f[CR]OPENSTATUS_API_TOKEN\f[R]
T}
.TE
.SS \f[CR]whoami\f[R] command (aliases: \f[CR]w\f[R])
Get your workspace information.
.RS
.PP
openstatus whoami [options]
.RE
.PP
Get your current workspace information, display the workspace name,
slug, and plan.
.PP
Usage:
.IP
.EX
$ openstatus [GLOBAL FLAGS] whoami [COMMAND FLAGS] [ARGUMENTS...]
.EE
.PP
The following flags are supported:
.PP
.TS
tab(@);
lw(20.9n) lw(20.9n) cw(10.8n) cw(17.3n).
T{
Name
T}@T{
Description
T}@T{
Default value
T}@T{
Environment variables
T}
_
T{
\f[CR]\-\-access\-token=\(dq\&...\(dq\f[R] (\f[CR]\-t\f[R])
T}@T{
OpenStatus API Access Token
T}@T{
T}@T{
\f[CR]OPENSTATUS_API_TOKEN\f[R]
T}
.TE
